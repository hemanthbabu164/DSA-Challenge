Q)Given two integer array A and B of size N each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum K valid sum combinations from all the possible sum combinations.

Note : Output array must be sorted in non-increasing order.

Example 1:

Input:
N = 2
K = 2
A [ ] = {3, 2}
B [ ] = {1, 4}
Output: {7, 6}
Explanation: 
7 -> (A : 3) + (B : 4)
6 -> (A : 2) + (B : 4)

// code

      class Solution {
  public:
    vector<int> maxCombinations(int N, int K, vector<int> &A, vector<int> &B) {
        // code here
        // vector<int> res;
        
        // // sort(A.begin(),A.end(),greater<int>());
        // // sort(B.begin(),B.end(),greater<int>());
        
        // int maxi1=*max_element(A.begin(),A.end());
        // int maxi2=*max_element(B.begin(),B.end());
        // int sum;
        // for(int i=0;i<N;i++)
        // {
        //     sum=maxi1+B[i];
        //     res.push_back(sum);
        // }
        
        // for(int i=0;i<N;i++)
        // {
        //     if(A[i]!=maxi1)
        //     {
        //         sum=maxi2+A[i];
        //       res.push_back(sum);
        //     }
          
        // }
        
        
        // sort(res.begin(),res.end(),greater<int>());
        // for(int i=0;i<res.size();i++)
        // {
        //     cout<<res[i]<<" ";
        // }
        // cout<<endl;
        // res.erase(res.begin()+K,res.end());
        // return res;
      
     priority_queue<vector<int>> pq;
        sort(A.begin(), A.end());
        sort(B.begin(), B.end());
        
        for(int i = N - 1; i >= 0; i--) 
            pq.push({A[i] + B[N - 1], i, N - 1});
            
        vector<int> ans;
        while(K-- > 0) {
            
            auto p = pq.top();
            pq.pop();
            
            int sum = p[0], x = p[1], y = p[2];
            ans.push_back(sum);
            pq.push({A[x] + B[y - 1], x, y - 1});
        }
        
        //ans.push_back(pq.top()[0]);
        return ans;

    }
};
