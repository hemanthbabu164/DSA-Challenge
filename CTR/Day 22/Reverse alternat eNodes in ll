Q)Given a linked list, you have to perform the following task:

Extract the alternative nodes starting from second node.
Reverse the extracted list.
Append the extracted list at the end of the original list.
Note: Try to solve the problem without using any extra memory.

Example 1:

Input:
LinkedList = 10->4->9->1->3->5->9->4
Output: 
10 9 3 9 4 5 1 4
Explanation: 
Alternative nodes in the given linked list are 4,1,5,4. Reversing the alternative nodes from the given list,
and then appending them to the end of the list results in a list 10->9->3->9->4->5->1->4.

// code
//{ Driver Code Starts
#include<stdio.h>
#include<stdlib.h>
#include<iostream>
using namespace std;
/* A linked list node */


struct Node
{
    int data;
    struct Node *next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};

struct Node *start = NULL;

/* Function to print nodes in a given linked list */
void printList(struct Node *node)
{
    while (node != NULL)
    {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
    
}

void insert()
{
    int n,value;
    cin>>n;
    struct Node *temp;
    for(int i=0;i<n;i++)
    {
        cin>>value;
        if(i==0)
        {
            start = new Node(value);
            temp = start;
            continue;
        }
        else
        {
            temp->next = new Node(value);
            temp = temp->next;
        }
    }
}


// } Driver Code Ends
/*
  reverse alternate nodes and append at the end
  The input list will have at least one element  
  Node is defined as 
  struct Node
  {
      int data;
      struct Node *next;
    
      Node(int x){
        data = x;
        next = NULL;
      }
    
   };

*/
class Solution
{
    public:
    
    Node * reverse(Node *head)
    {
        Node *Temp=head;
        Node *prev=NULL;
        Node *next=NULL;
        
        while(Temp!=NULL)
        {
            next=Temp->next;
            Temp->next=prev;
            prev=Temp;
            Temp=next;
        }
        
        return prev;
    }
    void rearrange(struct Node *odd)
    {
        //add code here
        struct Node * cur = odd;
        struct Node * next = cur->next;
        struct Node * temp1 = odd;
        struct Node * temp2 = odd->next;
        
        while(next != NULL)
        {
            cur->next = next->next;
            cur=next;
            next = cur->next;
        }
        while(temp1->next!=NULL){
            temp1 = temp1->next;
        }
        temp2 = reverse(temp2);
        temp1->next= temp2;
         
         
         
    }
};



//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while (t--) {
        insert();
        Solution ob;
        ob.rearrange(start);
        printList(start);
    }
    return 0;
}

// } Driver Code Ends
