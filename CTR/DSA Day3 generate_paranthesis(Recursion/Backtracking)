Q)Given an integer N representing the number of pairs of parentheses, 
the task is to generate all combinations of well-formed(balanced) parentheses.

//code
//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


// } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parentheses
class Solution
{
    public:
    vector<string> result;
    
    void solve(int open,int close,int n,string s)
    {
        if(s.length()==2*n)
        {
            result.push_back(s);
            return;
        }
        
        if(open<n)
        {
            solve(open+1,close,n,s+'(');   // open parantheses till it is less than n
        }
        if(close<open)
        {
            solve(open,close+1,n,s+')');    // for every close which is less than open, add close parentheses
        }
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        solve(0,0,n,"");
        return result;
        
    }
};

//{ Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 

// } Driver Code Ends
