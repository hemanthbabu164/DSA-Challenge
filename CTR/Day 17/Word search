Q)Given a 2D board of letters and a word. Check if the word exists in the board. The word can be constructed from letters of adjacent cells only. ie - horizontal or vertical neighbors. The same letter cell can not be used more than once.

Example 1:

Input: board = {{a,g,b,c},{q,e,e,l},{g,b,k,s}},
word = "geeks"
Output: 1
Explanation: The board is-
a g b c
q e e l
g b k s
The letters which are used to make the
"geeks" are colored.

//code

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:

   bool helper(vector<vector<char>> arr,string word,int i,int j,int ind,int n,int m)
   {
       if(ind==word.length())
       {
           return true;
       }
       if(i<0 || j<0 || i==n || j==m || word[ind]!=arr[i][j] || arr[i][j]=='!')
       {
           return false;
       }
       
       char c=arr[i][j];
       arr[i][j]='!';
       
       
       bool top = helper( arr,word,i+1,j,ind+1,n, m);
       bool right=helper( arr,word,i,j+1,ind+1,n, m);
       bool bottom=helper( arr,word,i-1,j,ind+1,n, m);
       bool left=helper( arr,word,i,j-1,ind+1,n, m);
       
       
       arr[i][j]=c;
       
       
       return top||right||bottom||left;
       
       
       
   }
    bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        int n= board.size();
        int m = board[0].size();

        

        // First search the first character
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {

                if (board[i][j] == word[0]) {
                    if (helper(board, word, i, j,0,n,m))
                        return true;
                }
            }
        }

        return false;
    }
};


//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}
// } Driver Code Ends
