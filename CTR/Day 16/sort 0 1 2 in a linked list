Q)Given linked list have 0 1 2 .sort it

/*
 
  Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution
{
    public:
    void insertAtTail(Node* &tail, Node* curr ) {
    tail -> next = curr;
    tail = curr;
}
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        // Add code here
       Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;
    
    Node* curr = head;
    
    // create separate list 0s, 1s and 2s
    while(curr != NULL) {
        
        int value = curr -> data;
        
        if(value == 0) {
            insertAtTail(zeroTail, curr);
        }
        else if(value == 1) {
            insertAtTail(oneTail, curr);
        }
        else if(value == 2) {
            insertAtTail(twoTail, curr);
        }       
        curr = curr -> next;
    }
    
    //merge 3 sublist
    
    // 1s list not empty
    if(oneHead -> next != NULL) {
        zeroTail -> next = oneHead -> next;
    }
    else {
        //1s list -> empty
        zeroTail -> next = twoHead -> next;
    }
    
    oneTail -> next = twoHead -> next;
    twoTail -> next = NULL;
    
	//setup head 
    head = zeroHead -> next;
    
    //delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;
    
    return head;
      
      /*if(head == NULL || head->next == NULL) return head;
        
        Node* zeroHead = new Node(-1);
        Node* zeroTail = zeroHead;
        
        Node* twoHead = new Node(-1);
        Node* twoTail = twoHead;
        
        Node* oneHead = new Node(-1);
        Node* oneTail = oneHead;
        
        Node* curr = head;
        
        while(curr != NULL){
            if(curr->data == 0){
                Node* temp = curr;
                curr = curr->next;
                temp->next = NULL;
                
                zeroTail->next = temp;
                zeroTail = temp;
            }else if(curr->data == 1){
                Node* temp = curr;
                curr = curr->next;
                temp->next = NULL;
                
                oneTail->next = temp;
                oneTail = temp;
            }else{
                Node* temp = curr;
                curr = curr->next;
                temp->next = NULL;
                
                twoTail->next = temp;
                twoTail = temp;
            }
        }
        
        Node* temp = oneHead;
        oneHead = oneHead->next;
        temp->next = NULL;
        delete temp;
        
        temp = twoHead;
        twoHead = twoHead->next;
        temp->next = NULL;
        delete temp;
        
        if(oneHead != NULL){
            zeroTail->next = oneHead;
            if(twoHead != NULL){
                oneTail->next = twoHead;
            }
            
        }else{
            if(twoHead != NULL){
                zeroTail->next = twoHead;
            }
        }
        
        temp = zeroHead;
        zeroHead = zeroHead->next;
        temp->next = NULL;
        delete temp;
        
        return zeroHead;*/
    
       
       
       
        
    }
};
