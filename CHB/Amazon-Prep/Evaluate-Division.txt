Question:
399. Evaluate Division
You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them. 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0


Solution:
Method-1 - OWN -> Passed all testcases and got accepted but inefficient: [TC=>Runtime:43ms Beats 2.93%  SC=> Memory:11.94MB Beats 55.74%]
Summary : Forming a matrix in the form of hashmap, Bruteforcing: iterating over it again and again till there are no changes to discover transitive relations
class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        int n=equations.size();
        map<pair<string,string>, double> mpp;
        for(int i=0;i<n;i++){
            string var1 = equations[i][0];
            string var2 = equations[i][1];
            mpp[{var1,var2}]=values[i];
            mpp[{var2,var1}]=1/values[i];
        }

        bool change =true;

        while(change){
            change=false;
            for(auto elem1:mpp){
                for(auto elem2:mpp){
                    string var1 = elem1.first.first;
                    string var2 = elem1.first.second;
                    string var3 = elem2.first.first;
                    string var4 = elem2.first.second;

                    if((var2 == var4) && mpp[{var1,var3}] == 0){
                        mpp[{var1,var3}] = elem1.second / elem2.second;
                        change =true;
                    }
                }
            }
        }

        vector<double> ans;

        for(int i=0; i< queries.size();i++){
            string var1 = queries[i][0];
            string var2 = queries[i][1];
            if(mpp[{var1,var2}]!=0){
                ans.push_back(mpp[{var1,var2}]);
                continue;
            }
            else{
                ans.push_back(-1);
            }
        }
        
        return ans;
    }
};

Method-2: GRAPH:
Summary: Variables are vertices, value a/b is the edge value between a->b
Specific direction required, since numerator-> denominator  has a different weight compared to denominator-> numerator

Then performing BFS for each query by passing in src and destination, we will be storing node and multiplication value in the queue and when we pop the destination node from queue we can just take that as the value for that query