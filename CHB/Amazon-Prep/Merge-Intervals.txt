Question:
56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Solution:
Method-1: sort and continue as per our cases : => Submission Accepted, TC => Sort:O(NlogN) +O(N) => Half Own
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n=intervals.size();

        vector<vector<int>> ans;
        sort(intervals.begin(), intervals.end());

        for(int i=0;i<n;i++){
            int start = intervals[i][0];
            int end = intervals[i][1];

            if(!ans.empty()){
                int oldStart = ans.back()[0];
                int oldEnd = ans.back()[1];
                if(start<=oldEnd){
                    if(end>oldEnd){
                        ans.back()[1]=end;
                    }
                }
                else{
                    ans.push_back({start,end});
                }
            }
            else{
                ans.push_back({start,end});
            }
        }

        return ans;


    }
};

Method-2: simplifying if conditions:
