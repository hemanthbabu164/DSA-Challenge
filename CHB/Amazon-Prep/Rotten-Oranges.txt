Question:
Rotten Oranges
Given an n x m grid, where each cell has the following values : 
2 - represents a rotten orange
1 - represents a Fresh orange
0 - represents an Empty Cell
Every minute, if a fresh orange is adjacent to a rotten orange in 4-direction ( upward, downwards, right, and left ) it becomes rotten. 
Return the minimum number of minutes required such that none of the cells has a Fresh Orange. If it's not possible, return -1.

Solution:
we can that it is going level wise, so we use bfs
Dont think locating a node in always list format, meaning index, think of it here in 2D Grid

class Solution{
public:
    int orangesRotting(vector<vector<int>> &grid) {
        int n=grid.size();
        int m = grid[0].size();

        int vis[n][m] = {-1};
        // {{row, col}, time}
        queue<pair<pair<int,int>,int>> q;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }            
            }
        }

        int count=0;
        int maxCount=0;

        // for all neighbours up,down,left,right
        // (row,col) => (row-1,col), (row+1,col), (row,col-1), (row,col+1)
        int delRow[] = {-1,1,0,0};
        int delCol[] = {0,0,-1,1};
        
        while(!q.empty()){
            pair<pair<int,int>,int> elem = q.front();
            q.pop();
            int row = elem.first.first;
            int col = elem.first.second;
            count = elem.second;
            maxCount = max(maxCount,count);

            // traversing neighbours
            for(int i=0;i<4;i++){
                int nrow = row+delRow[i];
                int ncol = col+delCol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    // if it is not already rotten and it is not empty
                    if(vis[nrow][ncol]!=2 && grid[nrow][ncol]==1){
                        q.push({{nrow,ncol},count+1});
                        vis[nrow][ncol]=2;
                    }
                }
            }
            
        }

        // verifying whether all fresh are rotten
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((vis[i][j] != 2) && (grid[i][j]==1)){
                    return -1;
                }            
            }
        }

        return maxCount;


    }
};