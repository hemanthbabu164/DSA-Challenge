Question: Number of Distinct Islands
Difficulty: Medium
Given a boolean 2D matrix grid of size n * m. You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically) forms an island. Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).

Solution:
=> Storing Islands with base coordinate subtracted in a set for distinct, parsing through the sources with dfs, can be done the same with bfs

// User function Template for C++

class Solution {
  public:
    void dfs(int row, int col, vector<vector<int>>& grid,vector<pair<int,int>> &vec,vector<vector<int>> &vis, int row0, int col0 ){
        // marking source as visited and processing it
        vis[row][col]=1;
        vec.push_back({row-row0,col-col0});
        int n= grid.size();
        int m=grid[0].size();
        
        int delrow[]={0,1,0,-1};
        int delcol[]={-1,0,1,0};
        
        // traversing through the neighbours
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && 
            vis[nrow][ncol]!=1){
                dfs(nrow,ncol,grid,vec,vis,row0,col0);
            }
        }
    }
    
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n= grid.size();
        int m=grid[0].size();
        
        vector<vector<int>> vis(n, vector<int>(m,0));
        set<vector<pair<int,int>>> st;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 & vis[i][j]!=1){
                    vector<pair<int,int>> vec;
                    dfs(i,j,grid,vec,vis,i,j);   
                    st.insert(vec);
                }
            }
        }
        
        return st.size();
    }
};
