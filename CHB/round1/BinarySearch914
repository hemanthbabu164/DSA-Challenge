//1. Search In A Row Wise And Column Wise Sorted Matrix

//M1: TC:O(n*logn) for a n*n matrix, you can just replace a couple positions of n with m for n*m 

#include <bits/stdc++.h> 
pair<int, int> search(vector<vector<int>> matrix, int x)
{
    int n=matrix.size();
    for(int i=0;i<n;i++){
        if(matrix[i][0]<=x && matrix[i][n-1]>=x){
            int low=0;
            int high=n-1;
            while(low<=high){
                int mid=(low+high)/2;
                if(matrix[i][mid]==x){
                    return {i,mid};
                }
                if(matrix[i][mid]>x){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
        }
    }
    return {-1,-1};
}

//M2: TC: O(n+m)
//idea: Reverse L part is sorted : i.e., if you are standing at (i,j) pos, 
//then all the num to its left (till {i,0}) are <(i,j) and all the num below (i.e. till {n,j}) are >(i,j)

#include <bits/stdc++.h> 
pair<int, int> search(vector<vector<int>> matrix, int x)
{
    int n=matrix.size();
    int row=0;
    int col=n-1;
    while (row >= 0 && col >= 0 && row < n && col < n){
        if(matrix[row][col]==x){
            return {row,col};
        }
        if(matrix[row][col]>x){
            col--;
        }
        else{
            row++;
        }
    }
    return {-1,-1};
}



//2. Peak Element in a Grid

//M1: Normal : Note: There are additional cases here in M1 as i took not only adjacent but also the diagonal ones for comparisions
vector<int> findPeakGrid(vector<vector<int>> &g){
    int n=g.size();
    int m=g[0].size();
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            bool key=true;
            if(j-1>=0){
                if(key && g[i][j-1]>=g[i][j]){
                    key=false;
                }
                if(key && i-1>=0){
                    if(g[i-1][j-1]>=g[i][j] || g[i-1][j]>=g[i][j]){
                        key=false;
                    }
                }
                if(key && i+1<n){
                    if(g[i+1][j-1]>=g[i][j] || g[i+1][j]>=g[i][j]){
                        key=false;
                    }
                }
            }
            else{
                if(i-1>=0 && g[i-1][j]>=g[i][j]){
                    key=false;
                }
                if(key && i+1<n && g[i+1][j]>=g[i][j]){
                    key=false;
                }
            }
            if(key && j+1<m){
                if(g[i][j+1]>=g[i][j]){
                    key=false;
                }
                if(key && i-1>=0){
                    if(g[i-1][j+1]>=g[i][j]){
                        key=false;
                    }
                }
                if(key && i+1<n){
                    if(g[i+1][j+1]>=g[i][j]){
                        key=false;
                    }
                }
            }
            if(key){
                // cout<<"\t"<<i<<"\t"<<j<<endl;
                return {i,j};
            }

        }
    }
    return {-1,-1};
}

//M2: Optimal: It is just like finding a peak element in 1D array, BS on columns, 
//Finding the max elem in the column makes it it the peak elem of the col(top and bottom conditions are satisfied)

int maxElem(vector<vector<int>> &g, int n, int mid){
    int maxi=0;
    int ind=-1;
    for(int i=0;i<n;i++){
        if(g[i][mid]>maxi){
            maxi=g[i][mid];
            ind=i;
        }
    }
    return ind;
}
vector<int> findPeakGrid(vector<vector<int>> &g){
    int n=g.size();
    int m=g[0].size();
    int low=0;
    int high=m-1;
    while(low<=high){
        int mid=(low+high)/2;
        int row=maxElem(g, n,mid);
        int left= mid-1>=0?g[row][mid-1]:-1;
        int right=mid+1<m?g[row][mid+1]:-1;
        if(g[row][mid]>left && g[row][mid]>right){
            return {row,mid};
        }
        else if(g[row][mid]<=left){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return {-1,-1};
}


//3. Median in a Row Wise Sorted Matrix

//M1: Naive, BF :
int median(vector<vector<int>> &matrix, int m, int n) {
    vector<int> ans;
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            ans.push_back(matrix[i][j]);
        }
    }
    sort(ans.begin(),ans.end());
    return ans[n*m/2];
}

//M2:
//Binary Search on the number of numbers in the matrix less than or equal to our mid
//the Binary search is taken on the range of minimum to maximum (not just on the elements)
#include <limits.h>
int upperBound(vector<int> &arr, int x, int n){
	int low=0;
	int high=n-1;
	int res=n;
	while(low<=high){
		int mid=low+(high-low)/2;
		if(arr[mid]<=x){
			low=mid+1;
		}
		else{
			high=mid-1;
			res=mid;
		}
	}
	return res;
	//you can just use ub=upper_bound(arr.begin(),arr.end(),x)
}
int numLessOrEq(vector<vector<int>> &matrix, int n, int m,int mid){
    int count=0;
    for(int i=0;i<n;i++){
        count+=upperBound(matrix[i], mid, m);
        
    }
    return count;
}
int median(vector<vector<int>> &matrix, int n, int m) {
    int low=INT_MAX;
    int high=INT_MIN;
    for(int i=0;i<n;i++){
        low=min(low,matrix[i][0]);
        high=max(high,matrix[i][m-1]);
    }
    int k=(n*m)/2;
    int ans=-1;
    while(low<=high){
        int mid=(low+high)/2;
        int val=numLessOrEq(matrix,n,m,mid);
        if(val>k){
            ans=mid;
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return ans;
}
