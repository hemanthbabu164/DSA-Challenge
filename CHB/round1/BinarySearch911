//1. Median of Two Sorted Arrays

//BruteForce
double median(vector<int>& a, vector<int>& b) {
	vector<int> combined;
	int i=0,j=0;
	int n=a.size();
	int m=b.size();
	while(i<n && j<m){
		if(a[i]<=b[j]){
			combined.push_back(a[i]);
			i++;
		}
		else{
			combined.push_back(b[j]);
			j++;
		}
	}
	while(i!=n){
		combined.push_back(a[i]);
		i++;
	}
	while(j!=m){
		combined.push_back(b[j]);
		j++;
	}
	int n1=n+m;
	double ans=0.0;
	if(n1%2==1){
		ans=combined[n1/2];
	}
	else{
		ans=(double)(combined[n1/2]+combined[n1/2 -1])/2.0;
	}
	return ans;
}

//Better:
double median(vector<int>& a, vector<int>& b) {
	int i=0,j=0;
	int n=a.size();
	int m=b.size();
	int count=0;
	int ind1=(n+m)/2-1;
	int ind2=(n+m)/2;
	int indel1=-1,indel2=-1;
	while(i<n && j<m){
		if(a[i]<=b[j]){
			if(count==ind1) indel1=a[i];
			if(count==ind2) indel2=a[i];
			count++;
			i++;
		}
		else{
			if(count==ind1) indel1=b[j];
			if(count==ind2) indel2=b[j];
			count++;
			j++;
		}
	}
	while(i!=n){
		if(count==ind1) indel1=a[i];
		if(count==ind2) indel2=a[i];
		count++;
		i++;
	}
	while(j!=m){
		if(count==ind1) indel1=b[j];
		if(count==ind2) indel2=b[j];
		count++;
		j++;
	}
	int n1=n+m;
	double ans=0.0;
	if(n1%2==1){
		ans=indel2;
	}
	else{
		ans=(double)(indel1+indel2)/2.0;
	}
	return ans;
}


//Optimal Binary Search:
double median(vector<int>& a, vector<int>& b) {
	//Valid Symmetry Checking ...... 
	//How many of smallest you choose to keep on the left of the symmetry from minlen array 
	//and how many more you require from the other array
	//Cross checkings left1<right2 and left 2<right 1, 
	//think of left1 and right1 to be elements of arr1 adjacent to the axis of symmetry after movements
	//Similarly left 2 and right 2
	
	// if n+m is even ,then left side and right side has n+m/2 elements (according to above logic, some from arr1 and some from arr2)	
	//if it is odd, then we can choose one side to have one element more than the other


	
	int n=a.size();
	int m=b.size();
	if(n>m){
		return median(b,a);
	}
	int low=0;
	int high=n;
	int left = (n+m+1)/2; // how many elements on the left side, if n+m is odd then it will add one more on the left
	while(low<=high){
		int mid1=(low+high)/2;
		int mid2=left-mid1;
		int l1=INT_MIN,l2=INT_MIN;
		int r1=INT_MAX,r2=INT_MAX;
		if(mid1<n) r1=a[mid1]; // checking if we have any element of the arr1 on the rightside
		if(mid2<m) r2=b[mid2];
		if(mid1-1 >=0) l1=a[mid1-1]; //if the left side is >0
		if(mid2-1>=0) l2=b[mid2-1];
		
		if(l1<=r2 && l2<=r1){// case 1, we achieved Symmetry
			if((n+m)%2 == 1) return max(l1,l2);
			return (double)(max(l1,l2)+min(r1,r2))/2.0;
		}
		//Do a Dryrun with arr1=[1 3 4 7 10 12] arr2=[2 3 6 13]
		//check it by incrementing the number of elements of arr2 is present on the left till you cross the valid symmetry,i.e do atleast one iteration after getting symmetry
		else if (l1>r2){
			high=mid1-1;
		}
		else{
			low=mid1+1;
		}
	}
	return 0;
}
