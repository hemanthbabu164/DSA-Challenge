//1. SRT or PreEmptive SJF
//PreEmptive SJF or SRT
#include <stdio.h>

struct process{
	int at;
	int remt;
	int ft;
	int status;
}readylist[10];

int n;

int dispatcher(int time){
	int i,index=-1,minRemt=9999;
	for(i=0;i<n;i++){
		if(readylist[i].status!=1){
			if(readylist[i].at<=time){
				if(readylist[i].remt<minRemt){
					minRemt=readylist[i].remt;
					index=i;
				}
			}
		}
	}
	return index;
}

int main(){
	printf("\nEnter No.of Processes(<=10)\t: ");
	scanf("%d",&n);
	int i;
	int bt[10];
	for(i=0;i<n;i++){
		printf("\nProcess %d:",i+1);
		printf("\nEnter Arrival time: ");
		scanf("%d",&readylist[i].at);
		printf("Enter Burst Time: ");
		scanf("%d",&readylist[i].remt);
		readylist[i].status=0;
		bt[i]=readylist[i].remt;
	}
	int remProcesses=0;
	int pid=0;
	int cur_time=0;
	while(remProcesses<n){
		pid=dispatcher(cur_time);
		while(pid==-1){
			cur_time++;
			pid=dispatcher(cur_time);
		}
		cur_time++;
		readylist[pid].remt--;
		if(readylist[pid].remt==0){
			readylist[pid].status=1;
			readylist[pid].ft=cur_time;
			remProcesses++;
		}
	}
	printf("\nProcess\t Arrival Time\t Burst Time\t Finish Time\n");
	printf("*******\t **********\t **********\t *********\n");
	for(i=0;i<n;i++)
	{
		printf("%d\t\t%d\t\t%d\t\t\t%d\n",i+1,readylist[i].at,bt[i],readylist[i].ft);
	}
}


//2.Round-Robin
#include <stdio.h>

struct process{
	int at;
	int remt;
	int ft;
	int status;//0-New, 1-Executed but not completed, 2-completed
}readylist[10];

int n;

int dispatcher(int time){
	int high_at=0,high_status=0,i;
	int index=-1;
	int m=n;
	for(i=0;i<n;i++){
		if(readylist[i].status!=2){
			if(readylist[i].at<=time){
				if(readylist[i].at>high_at){
					high_at=readylist[i].at;
				}
				if(readylist[i].status>high_status){
					high_status=readylist[i].status;
				}
			}
		}
	}
	//Selects Least AT, if process have same AT, Select Least status, if same status then select least Index
	for(i=0;i<n;i++){
		if(readylist[i].status!=2){
			if(readylist[i].at<=time){
				if(readylist[i].at<high_at){
					index=i;
					high_at=readylist[i].at;
				}
				else if(readylist[i].at==high_at){
					if(readylist[i].status<high_status){
						index=i;
						high_status=readylist[i].status;
					}
					else{
						if(i<m){
							index=i;
							m=i;
						}
					}
				}
			}
		}
	}
	return index;
}

int main(){
	printf("\nEnter No.of Processes\t:");
	scanf("%d",&n);
	int i;
	int quantum;
	printf("\nEnter Quantum\t:");
	scanf("%d",&quantum);
	int art[10],bot[10];
	for(i=0;i<n;i++){
		printf("\nProcess %d:",i+1);
		printf("\nEnter Arrival Time\t: ");
		scanf("%d",&readylist[i].at);
		printf("Enter Burst Time\t:");
		scanf("%d", &readylist[i].remt);
		art[i]=readylist[i].at;
		bot[i]=readylist[i].remt;
		readylist[i].status=0;
	}
	int cur_time=0;
	int comProc=0;
	int pid;
	while(comProc<n){
		pid=dispatcher(cur_time);
		while(pid==-1){
			cur_time++;
			pid=dispatcher(cur_time);
		}
		if(readylist[pid].remt<=quantum){
			cur_time+=readylist[pid].remt;
			readylist[pid].ft=cur_time;
			readylist[pid].status=2;
			comProc++;
		}
		else{
			cur_time+=quantum;
			readylist[pid].at=cur_time;
			readylist[pid].remt-=quantum;
			readylist[pid].status=1;
		}
	}
	printf("\nprocess-id\tarrival time\tservice time\tfinish time\tturnaround time\twaiting time\n");
    printf("**************************************************************************************\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, art[i], bot[i], readylist[i].ft, readylist[i].ft - art[i], readylist[i].ft - art[i] - bot[i]);
    }
}
