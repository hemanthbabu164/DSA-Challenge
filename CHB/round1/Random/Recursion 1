// The Annoying atoi()
//M1: The Normie Method
#include <limits>
class Solution {
public:
    int myAtoi(string s) {
        long long num=0;
        int sign=1;
        int n=s.size();
        int whiteSpaceTrail=0;
        for(int i=0;i<n;i++){
            if(s[i]==' '){
                whiteSpaceTrail++;
            }
            else{
                break;
            }
        }
        if(whiteSpaceTrail<(n-1)){
            if(s[whiteSpaceTrail] == '-'){
                sign=-1;
                whiteSpaceTrail++;
            }else if(s[whiteSpaceTrail] == '+'){
                whiteSpaceTrail++;
            }
        }
        for(int i=whiteSpaceTrail;i<n;i++){            
            if((s[i]<'0') || s[i]>'9'){
                break;
            }
            if(num>(INT_MAX - (s[i] - '0'))/10){
                return sign==-1?(INT_MIN):(INT_MAX);
            }
            num=num*10+s[i]-48;
        }
        num*=sign;
        return num;
    }
};

//M2: The Wasteful Recursion 
#include <limits>
class Solution {
public:
    int f(int i,int n,string s,bool is_begin,long long sum,int sign){
        if(i==n){
            return sum*sign;
        }
        if((s[i]==' ') && is_begin){
            return f(i+1,n,s,is_begin,sum,sign);
        }
        if(is_begin){
            if(s[i]=='-'){
                is_begin=false;
                sign=-1;
                return f(i+1,n,s,is_begin,sum,sign);
            }
            if(s[i]=='+'){
                is_begin=false;
                return f(i+1,n,s,is_begin,sum,sign);
            }
        }
        is_begin=false;

        if((s[i]<'0') || s[i]>'9'){
            return sum*sign;
        }
        if(sum>(INT_MAX - (s[i] - '0'))/10){
            return sign==-1?(INT_MIN):(INT_MAX);
        }
        sum=sum*10+s[i]-48;
        return f(i+1,n,s,is_begin,sum,sign);

    }
    int myAtoi(string s) {
        return f(0,s.size(),s,true,0,1);
    }
};

//The Edge Case Hell Pow(x,n)
//M1: Normie Method
class Solution {
public:
    double myPow(double x, int n) {
        if(n==0 || x==1 || ((x==-1)&&(n%2==0))){
            return 1;
        }
        if(x==-1){
            return -1;
        }
        if(n==INT_MIN){
            return 0;
        }
        double pow=1;
        int sign=1;
        if(n<0){
            sign=-1;
            n*=-1;
        }
        pow=x;
        int temp_pow=1;
        while(temp_pow*2<=n){
            pow*=pow;
            temp_pow*=2;
            if(temp_pow>(INT_MAX/2)){
                break;
            }
        }
        int diff=n-temp_pow;
        for(int i=0;i<diff;i++){
            pow*=x;
        }
        return sign==1?pow:(1/pow);
    }
};

//M2: The Savior Recursion
class Solution {
public:
    double myPow(double x, int n) {
        if(x==0) return 0;
        if(x==1 || n==0) return 1;
        if(n==1) return x;
        if(n<0){
            n=abs(n);
            x=1/x;
        }
        if(n%2==0){
            return myPow(x*x,n/2);
        }
        return x*myPow(x,n-1);
    }
};
