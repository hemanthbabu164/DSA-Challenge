//*No.of Undirected Graphs can be constructed out of a given n number of vertices.
class Solution {
  public:
    long long count(int n) {
        // your code here
        return pow(2,n*(n-1)/2);
    }
};

//**Adjacency List Representation
//M1: Naive , Idiotic one, TLE
class Solution {
  public:
    // Function to return the adjacency list for each vertex.
    vector<vector<int>> printGraph(int V, vector<pair<int,int>>edges) {
        // Code here
        vector<vector<int>> adjlist;
        for(int ver=0;ver< V;ver++){
            vector<int> adj;
            for(auto edge:edges){
                if(edge.first == ver){
                    adj.push_back(edge.second);
                }
                else if(edge.second == ver){
                    adj.push_back(edge.first);
                }
            }
            adjlist.push_back(adj);
        }
    
        return adjlist;
    }
};
//M2: Smart One
class Solution {
  public:
    // Function to return the adjacency list for each vertex.
    vector<vector<int>> printGraph(int V, vector<pair<int,int>>edges) {
        // Code here
        vector<vector<int>> adjlist(V);
        for(auto edge: edges){
            int u=edge.first;
            int v=edge.second;
            adjlist[u].push_back(v);
            adjlist[v].push_back(u);
        }
    
        return adjlist;
    }
};

//***Number of Provinces or No.of Components in Graph
//M1: Me Me Style
class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<int> visited(n,0);
        int count=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                queue<int> q;
                visited[i]=1;
                q.push(i);
                while(!q.empty()){
                    int node=q.front();
                    q.pop();
                    for(int j=0;j<n;j++){
                        if(isConnected[node][j]==1 && !visited[j] ){
                            q.push(j);
                            visited[j]=1;
                        }
                    }
                }
            }
        }
        return count;
    }
};

//***BFS
//BFS only goes through the node directly or indirectly connected to the starting node.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        int visited[V]={0};
        vector<int> bfs;
        queue<int> q;
        q.push(0);
        visited[0]=1;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            bfs.push_back(node);
            for(int j:adj[node]){
               if(!visited[j]){
                    q.push(j);
                    visited[j]=1;
               }
                
            }
        }
            
        return bfs;
    }
