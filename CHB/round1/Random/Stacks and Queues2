//Valid Paranthesis
class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        unordered_map<char,char> mpp;
        mpp['(']=')';
        mpp['[']=']';
        mpp['{']='}';
        mpp[')']='(';
        mpp['}']='{';
        mpp[']']='[';
        for(char ch : s){
            if(ch=='}' || ch==')' || ch==']'){
                if(st.empty()){
                    return false;
                }
                if(st.top()==mpp[ch]){
                    st.pop();
                    continue;
                }
                else{
                    return false;
                }
            }
            else{
                st.push(ch);
            }
        }
        if(!st.empty()) return false;
        return true;
    }
};


//Minstack Implementation
//M1:
class MinStack {
    stack<pair<int,int>> st;
public:
    MinStack() {
        
    }
    
    void push(int val) {
        if(st.empty()){
            st.push({val,val});
        }
        else{
            st.push({val,min(val,st.top().second)});
        }
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};

//M2: With O(N) space instead of O(2N):
//TO PRESERVE THE VALUE OF PREVMINIMUM WE USE THE FORMULA In Push if we find a min: newVal=2*val-mini, in pop to update mini when top<mini we do mini=2*mini=topVal
class MinStack {
    stack<long long> st;
    long long mini;
public:
    MinStack() {
        mini=INT_MAX;
    }
    
    void push(int val) {
        if(st.empty()){
            mini=val;
            st.push(val);
        }
        else{
            if(val>mini){
                st.push(val);
            }
            else{
                //push modified val, update mini, we do this so that we can always get mini accross all stages
                long long newVal=(long long)2*val-mini;
                st.push(newVal);
                mini=val;
            }
        }
    }
    
    void pop() {
        if(st.empty()) return;
        long long x=st.top();
        st.pop();
        if(x<mini) mini=(long long)2*mini-x;
    }
    
    int top() {
        long long x=st.top();
        if(x<mini) return mini;
        else return x;
    }
    
    int getMin() {
        return mini;
    }
};
