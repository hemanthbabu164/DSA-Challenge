//1.Row with max 1s

int rowWithMax1s(vector<vector<int>> &matrix, int n, int m)
{
    int maxi=0;
    int ind=0;
    for(int i=0;i<n;i++){//To reduce O(n*m) to O(n*logm) we can just optimise each row process, binary search like lowerbound(1), upperbound(0) can be used
        int count=0;
        int low=0;
        int high=m-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[i][mid]==1){
                count=m-mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        
        if(maxi<count){
            maxi=count;
            ind=i;
        }
        if(maxi==m) break;
    }
    return ind;
}


//2. Search in a Sorted 2D Matrix

//M1- TC: O(n+logm) ~ O(n)
bool searchMatrix(vector<vector<int>>& mat, int target) {
    int n=mat.size();
    int m=mat[0].size();
    if (target < mat[0][0] || target > mat[n - 1][m - 1]) {
        return false;
    }
    bool key1=true;
    int i=0;
    while(key1 && i<n){
        if(mat[i][m-1]==target){
            return true;
        }
        if(mat[i][m-1]>target){
            key1=false;
            break;
        }
        i++;
    }
    if(i==n){
        return false;
    }
    int low=0;
    int high=m-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(mat[i][mid]==target){
            return true;
        }
        if(mat[i][mid]>target){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return false;
}

//M2 TC: O(log(n*m))
//Idea: Thinking of the matrix as an array and changing the indices of the array to matrix indices
//Ex: matrix:n*m , ind=i, then row=i/m, col=i%m
bool searchMatrix(vector<vector<int>>& mat, int target) {
    int n=mat.size();
    int m=mat[0].size();
    if (target < mat[0][0] || target > mat[n - 1][m - 1]) {
        return false;
    }
    int low=0;
    int high=n*m-1;
    while(low<=high){
        int mid=(low+high)/2;
        int row=mid/m;
        int col=mid%m;
        if(mat[row][col]==target){
            return true;
        }
        if(mat[row][col]>target){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return false;
}
