//1.Search in Unique Rotated Sorted Array with O(logn)TC

int search(vector<int>& arr, int n, int k)
{
    int low=0;
    int high=n-1;
    while(low<=high){
        int mid=low+(high-low)/2;
        if(arr[mid]==k){
            return mid;
        }
        //left sorted?
        if(arr[mid]>=arr[low]){
            if(arr[mid]>k && arr[low]<=k){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        //right sorted?
        else{
            if(arr[mid]<k && arr[high]>=k){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
    }
    return -1;

}



//2.Search in Rotated Sorted Array , duplicates allowed, on average TC is O(logn) and on the rare Worst case TC is O(n/2)

bool searchInARotatedSortedArrayII(vector<int>&arr, int k) {
    //The problem we get here if we use the same solution as unique elements one is :
    //for the edge case where mid element is equal to low and high ex:[3 1 2 3 3 3 3 ]
    //it will show left sorted? is also true
    int n=arr.size();
    int low=0;
    int high=n-1;
    while(low<=high){
        int mid=low+(high-low)/2;
        if(arr[mid]==k){
            return true;
        }
        if(arr[low]!=arr[mid] || arr[high]!=arr[mid]){
            //left sorted?
            if(arr[mid]>=arr[low]){
                if(arr[mid]>k && arr[low]<=k){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            //right sorted?
            else{
                if(arr[mid]<k && arr[high]>=k){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        else{
            low++;
            high--;
        }
    }
    return false;
}
