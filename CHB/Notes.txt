*************************************************************************************************************************************
DYNAMIC PROGRAMMING
*************************************************************************************************************************************
Note: For Possible DP
1: Recursion
  Steps in Recursion:
  1. make the function to be based on an indexing (if array we will naturally have that )
  2. Try out all stuffs possible on that index according to the problem statement
  3. make out the base case,  
  tip :if count ,returning 1 in base case and summing up all possibilities gives an answer 
      if min, carry the cost of each possibility in that path, and return the mini of all them
2: Memoisation(DP TD) => Required answer to BaseCase => if dp has answer dont make the call, else make the call assign to dp and return
3: Tabulation(DP BU) => BaseCase to Required answer, assign the basecases to dp arr, then look at the recursion and convert it into loop => this eliminates stack space
4: Optimizing Space Complexity. => Only keeping the necessary no.of variables, instead of entire dp array, which eliminates the SC by another level

*************************************************************************************************************************************
TWO POINTER & SLIDING WINDOW
*************************************************************************************************************************************
Any Problem which involves finding out the maximum substring or something like that, you should straight away start thinking about 2 pointer and sliding window approach => Not a specific algorithm, changes according to the problem, only constant is a window will be moving

4 Patterns:

**Pattern-1:- Constant Window 
=> Move it based on condition, both l and r move at the same time

**Pattern-2:- Longest subarray/substring where <condition>
|=> BruteForce O(N^2): All subarrays - 2 for loops i:0->n, j:i->n ; we can put some optimization here as per condition like breaking off the innerloop once sum exceeds k or something like that
|=> Better O(2*N): Expand -> r, Shrink -> l
Example:
```
while(r<n){
	sum=sum+arr[r];
	while(sum>k){
		l++;
	}
	maxlen = max(maxlen, r-l+1);
	r=r+1;
}
```
|=> Optimal O(N): Can be done only when condition permits, here window size need not be shrunk less than maxlen so we will only move fwd one step instead of shrinking:
Example:
```
while(r<n){
	sum=sum+arr[r];
	if(sum>k){
		l++;
	}
	maxlen = max(maxlen, r-l+1);
	r=r+1;
}
```

**Pattern-3:- No.of subarrays where <condition>
Should understand when to shrink and when to expand => Solved Using Pattern-2
Example:
Number of substrings containing all three characters , s=bbacbaa
Intution: if we find min substring with all three characters, then we can add all the left characters to count since we get substrings adding each of them,  if we take the above s => s[1:4]=bac is a string with all three lastseen!=-1 ({2,1,3}), now we take bac(s[1:4]) and bbac(s[0:4]) as possible substrings
```
lastseen[3]={-1,-1,-1}
for(i:0->n){
	lastseen[s[i] - 'a') = i;
	if(all three lastseen != -1){
		count+= 1+min(all three last seen)
	}
}
return count;
```

To Find No.Of Subarrays with sum = k , we will do:
x = No.Of Subarrays with sum <= k
y = No.Of Subarrays with sum <= k-1
and return x-y

**Pattern-4:- Shortest/Mininum window <condition>
When we find a valid window, we shrink the window and check if it is valid or not

*************************************************************************************************************************************
GRAPH
*************************************************************************************************************************************
If you see transitive relations between variables giving some values => go for graph by putting variables as vertices, values as weights
Determine whether it is directed or not based on the relations given are commutative or not


Graph:
-> Note in the question whether the graph is 0-based numbering or 1-based numbering to tweak the algorithms accordingly

-> Adjacency Matrix ❌ Adjacency List ✅ [vector<int> adj[] => no.of rows = no.of vertices(or +1), each element is a vector] 

-> Traversal algo are such that it travels to all the connected nodes in the component, for unconnected components to traverse in graph we use VISITED array, Meaning every  traversal follows the structure:
int Visited[N]={0}
for(i=1->N){
	if(!Visited(i)) Traverse(i)
}

-> BFS or Levelwise => distance from the source is increased uniformly => O(N)+O(2E)
QUEUE structure used
starting node is marked as visited and put in queue
Then iterating over queue, pop, check Adjacency List for neighbour, if it is not already visited put neighbours in queue and mark it as visited
NOTE : Dont forget that marking as visited is during pushing in the QUEUE

-> DFS :
Recursion 
starting node is marked as visited and put in list
call a recursive dfs function

-> Detecting Cycle in an Undirected graph:
1. With BFS: TC => O(N+2E), SC => O(N+N)
	In Queue insert {node,parent}
	If a neighbour is already visited, then it came from some other path, meaning a cycle in undirected graph: NOTE THIS VISITED NEIGHBOUR CANT BE THE PARENT ITSELF (since 1->2,3, 2->1,3; here 1 is already visited, but it is not the issue)
	This needs to be done for each component(start node) => means you can put in the before structure :
		int Visited[N]={0}
		for(i=1->N){
			if(!Visited(i)) Traverse(i)
		}
		


**BiPartite Graph:**
-> In DSA we can prove it by taking 2 colors, and coloring the graph such that no 2 adjacent nodes have the same color 
-> Linear graph (No cycles) and Even length cycle graph are BiPartite graphs
-> Odd length cycle graphs are non-bipartite graph
=> Conversly we can also prove whether a graph contains odd length cycles or not by implementing BiPartite check
BiPartite Check:

Method-1: BFS:
Just doing a BFS traversal, [Visited array will be color array, with acceptable values -1,0,1]
Coloring each neighbour the opposite of the node if neighbour is not colored
if neighbour is colored, check if the color is same as the node, if yes return false

Method-2: DFS:
DFS traversal with similar logic to BFS
In the recursion if any of the DFS call returns false, then no need to check further, you can return a false


**Detect Cycles in a Directed Graph:**
With DFS:
-> Same method as in undirected graph wont work
-> Cycle could be said as ON THE SAME PATH NODE HAS TO BE VISITED AGAIN
-> you dont need parent storage here

We maintain 2 arrays => 1. visited, 2. PathVisited [Or we can use single visited array with 3 values]
PathVisited for a node will be reset when dfs call for that node is being returned as false(no cycle)
And when another component is getting started for a dfs call, reset all the pathVisited array elements
if any of the DFS call returns true, then no need to check further neighbors, you can return a true
