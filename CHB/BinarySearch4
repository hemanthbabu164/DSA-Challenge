//1.How many times has a sorted array been rotated
int findMin(vector<int>& arr)
{
	int low=0;
	int high=arr.size()-1;
	int ans=arr[low];
    int index=low;
	while(low<=high){
		int mid=low+(high-low)/2;
		if(arr[low]<=arr[high]){
			if(ans>arr[low]){
                ans=arr[low];
                index=low;
            }
			break;//array already sorted
		}
		//left sorted?
		if(arr[mid]>=arr[low]){
			if(ans>arr[low]){
                ans=arr[low];
                index=low;
            }
			low=mid+1;

		}
		//right sorted?
		else{
			if(ans>arr[mid]){
                ans=arr[mid];
                index=mid;
            }
			high=mid-1;
		}
	}
	return index;
}
int findKRotation(vector<int> &arr){
        return findMin(arr);
}


//2.Single Non Duplicate in a sorted array
int singleNonDuplicate(vector<int>& arr)
{
	int n=arr.size();
	if(n==1){
		return arr[0];
	}
	//So as to get a cleaner code, we are doing some edge cases outside
	if(arr[0]!=arr[1]){
		return arr[0];
	}
	if(arr[n-1]!=arr[n-2]){
		return arr[n-1];
	}
	int low=0;
	int high=n-1;
	while(low<=high){
		int mid=low+(high-low)/2;
		if(arr[mid-1]!=arr[mid] && arr[mid+1]!=arr[mid]){
			return arr[mid];
		}
		//before target (even ind, odd ind)=(val,val)
		//after target (odd ind, even ind)=(val,val)
		if(mid%2==0){
			if(arr[mid]==arr[mid+1]){//lefthalf
				low=mid+1;
			}
			else{
				high=mid-1;
			}
		}
		else{
			if(arr[mid]==arr[mid-1]){//lefthalf
				low=mid+1;
			}
			else{
				high=mid-1;
			}
		}
	}
	return -1;
}

//3.Finding Peak Element
int findPeakElement(vector<int> &arr) {
    int n=arr.size();
    if(n==1){
        return 0;
    }
    if(n==2){
        return arr[0]>arr[1]?0:1;
    }
    if(arr[0]>arr[1]){
        return 0;
    }
    if(arr[n-1]>arr[n-2]){
        return n-1;
    }
    int low=1;
    int high=n-2;
    while(low<=high){
        int mid=low+(high-low)/2;
        if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){//mid is peak
            return mid;
        }
        if(arr[mid]>arr[mid+1]){//mid on negative slope
            high=mid-1;
        }
        else if(arr[mid]>arr[mid-1]){//mid on positive slope
            low=mid+1;
        }
        else{//mid is trough/bottom(lowest point in V),then either will be fine
            high=mid-1;
        }
    }
    return -1;
}
