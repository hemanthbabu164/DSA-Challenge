//1.FCFS
#include<stdio.h>
 
 int main()
 
{
    int n,bt[30],wait_t[30],turn_ar_t[30];
    int av_wt_t=0,avturn_ar_t=0,i,j;
    printf("Enter No.of Processes:\t");  
    scanf("%d",&n);
 
    printf("\nEnter Burst Out Times:\n");
    for(i=0;i<n;i++)  
    {
        printf("P[%d]:",i+1);
        scanf("%d",&bt[i]);
    }
 
    wait_t[0]=0;   
 
    for(i=1;i<n;i++)
    {
        wait_t[i]=wait_t[i-1]+bt[i-1];
    }
 
    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time");
 
    for(i=0;i<n;i++)
    {
        turn_ar_t[i]=bt[i]+wait_t[i];
        av_wt_t+=wait_t[i];
        avturn_ar_t+=turn_ar_t[i];
        printf("\nP[%d]\t\t%d\t\t%d\t\t\t%d",i+1,bt[i],wait_t[i],turn_ar_t[i]);
    }
 
    av_wt_t/=n;
    avturn_ar_t/=n; 
    printf("\nAverage Waiting Time:%d",av_wt_t);
    printf("\nAverage Turnaround Time:%d",avturn_ar_t);
 
    return 0;
}


//2.Non PreEmptive SJF
#include <stdio.h>
#include <limits.h>

struct process{
	int at;
	int bt;
	int ft;
	int status;
}readylist[10];

int n;

int dispatcher(int time){
	int minbt=INT_MAX,index=-1,i;
	for(i=0;i<n;i++){
		if(readylist[i].status!=1){
			if(readylist[i].at<=time){
				if(readylist[i].bt<minbt){
					index=i;
					minbt=readylist[i].bt;
				}
			}
		}
	}
	return index;
}

int main(){
	printf("\nEnter No.of Processes(<=10):");
	scanf("%d",&n);
	int i;
	printf("\nEnter Details:\n");
	for(i=0;i<n;i++){
		printf("\nProcess : %d",i+1);
		printf("\nEnter Arrival time\t: ");
		scanf("%d",&readylist[i].at);		
		printf("Enter Burst time\t: ");
		scanf("%d",&readylist[i].bt);
		readylist[i].status=0;
		readylist[i].ft=0;
	}
	int cur_time=0;
	int pid=0;
	i=0;
	while(i<n){
		pid=dispatcher(cur_time);
		while(pid==-1){
			//Meaning The time before the 1st process arrives
			cur_time++;
			pid=dispatcher(cur_time);
		}
		cur_time+=readylist[pid].bt;
		readylist[pid].ft=cur_time;
		readylist[pid].status=1;
		i++;
	}
	printf("Process\t Arrival Time\t Burst Time\tFinish Time \t TT \t\tWT\n");
	printf("*******\t ************\t ************\t***********\t********\t********\n");
	for(i=0;i<n;i++){
		printf("%d\t\t%d\t\t%d\t\t%d\t%d\t\t%d\n",i+1,readylist[i].at,readylist[i].bt,readylist[i].ft,(readylist[i].ft-readylist[i].at),(readylist[i].ft-readylist[i].at)-readylist[i].bt);
	}
}


