//*Generate Binary Strings without consecutive zeroes
//Recursion:
//Time complexity: O(2^n)
//Space complexity: O(n)
class Solution {
public:
    void genString(int i,int n,bool key,string s,vector<string> &ans){
        if(i==n){
            ans.push_back(s);
            return;
        }
        i++;
        if(key){
            string temp=s;
            temp+='0';
            genString(i,n,false,temp,ans);
            s+='1';
            genString(i,n,true,s,ans);
        }
        else{
            s+='1';
            genString(i,n,true,s,ans);
        }
    }
    vector<string> validStrings(int n) {
        vector<string> ans;
        string s;
        genString(0,n,true,s,ans);
        return ans;
    }
};


//*Generate Parantheses 
//Recursion , Same as Above
class Solution {
public:
    void genParantheses(int openCount,int closedCount,int n,vector<string> &ans,string s){
        if(closedCount==0){
            ans.push_back(s);
            return;
        }
        if(openCount==closedCount){
            openCount--;
            s+='(';
            genParantheses(openCount,closedCount,n,ans,s);
        }
        else{
            if(openCount>0){
                //taking open
                openCount--;
                string temp=s;
                temp+='(';
                genParantheses(openCount,closedCount,n,ans,temp);
                openCount++;
                //taking closed
                closedCount--;
                s+=')';
                genParantheses(openCount,closedCount,n,ans,s);
            }
            else{
                closedCount--;
                s+=')';
                genParantheses(openCount,closedCount,n,ans,s);
            }
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s;
        genParantheses(n,n,n,ans,s);
        return ans;
    }
};


//*Generate Powerset, Set of All Subsets
//M1: Normal Recursion
class Solution {
public:
    void genSubsets(int i, int n, vector<int> arr,vector<int> &nums, vector<vector<int>> &subset){
        if(i==n){
            subset.push_back(arr);
            return;
        }
        vector<int> temp=arr;
        arr.push_back(nums[i]);
        i++;
        genSubsets(i,n,arr,nums,subset);
        genSubsets(i,n,temp,nums,subset);
        
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subset;
        vector<int> arr;
        genSubsets(0,nums.size(),arr,nums,subset);
        return subset;
    }
};

//M2: With Bit Manipulation:O(2^n * n)
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subset;
        int n=nums.size();
        //Now with Bit Manipulation, 000=[] to 111=[1,2,3],1<<n ~ 2^n, to check which bit is set just use & operator 
        for(int i=0;i<(1<<n);i++){
            vector<int> arr;
            for(int j=0;j<n;j++){
                if(i&(1<<j)){
                    arr.push_back(nums[j]);
                }
            }
            subset.push_back(arr);

        }
        return subset;
    }



//*Better String, which has more Unique Subsequences
//M1: You will get TLE
class Solution {
  public:
    void genStrings(int i,int n, string s, string str,set<string> &s1){
        if(i==n){
            s1.insert(s);
            return;
        }
        string temp=s;
        s+=str[i];
        i++;
        genStrings(i,n,s,str,s1);
        genStrings(i,n,temp,str,s1);
        
    }
    string betterString(string str1, string str2) {
        // code here
        set<string> s1,s2;
        string temp1,temp2;
        genStrings(0,str1.size(),temp1,str1,s1);
        genStrings(0,str2.size(),temp2,str2,s2);
        return s1.size()>=s2.size()?str1:str2;
    }
};

//M2: The Same above Bit Manipulation: might still get TLE
    int subsetsLength(string& str) {
        set<string> subset;
        int n=str.size();
        //Now with Bit Manipulation, 000=[] to 111=[1,2,3],1<<n ~ 2^n, to check which bit is set just use & operator 
        for(int i=0;i<(1<<n);i++){
            string arr="";
            for(int j=0;j<n;j++){
                if(i&(1<<j)){
                    arr+=str[j];
                }
            }
            subset.insert(arr);

        }
        return subset.size();
    }
    string betterString(string str1, string str2) {
        
        return subsetsLength(str1)>=subsetsLength(str2)?str1:str2;
    }

//*Subsequences With Sum k
//M1: Recursion, Take , Not take, Same as above , returns c0 or 1 in Base case accordingly, does left,right and returns left+right
class Solution{
	public:	
    int genSub(int i,int n, int sum,int s,int arr[]){
        if(s>sum){
            return 0;
        }
        if(i==n){
            if(s==sum){
                return 1;
            }
            else{
                return 0;
            }
        }
        s+=arr[i];
        int l=genSub(i+1,n,sum,s,arr);
        s-=arr[i];
        int r=genSub(i+1,n,sum,s,arr);
        return l+r;
        
    }
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        return genSub(0,n,sum,0,arr);        
	}
	  
};

//* iS there a Subset with Sum k? Boolean, one subset is enough, efficient:
//Recursion as above but if conditions remove further calls
bool genSub(int i, int n, int k, int s, vector<int> &a){
    if(s>k){
        return false;
    }
    if(n==i){
        if(s==k){
            return true;
        }
        else{
            return false;
        }
    }
    s+=a[i];
    if(genSub(i+1, n, k, s, a)){
        return true;
    }
    s-=a[i];
    if(genSub(i+1, n, k, s, a)){
        return true;
    }
    return false;
}
bool isSubsetPresent(int n, int k, vector<int> &a)
{
    // Write your code here
    return genSub(0,n,k,0,a);
}
