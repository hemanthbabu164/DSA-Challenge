//Fibonacci Both Ways, DP TD-Memoisation,BU-Tabulation
class Solution {
  public:
  long long int recTop(int n, vector<long long int> &dp,long long int mod){
      if(n==1 or n==0){
          dp[n]=n;
          return n;
      }
      if(dp[n]!=-1){
          return dp[n];
      }
      dp[n]=(recTop(n-1,dp,mod)+recTop(n-2,dp,mod))%mod;
      return dp[n];
      
  }
    long long int topDown(int n) {
        // code here
        vector<long long int> dp(n+1,-1);
        long long int mod=1000000007;
        return recTop(n,dp,mod);
    }
    long long int bottomUp(int n) {
        // code here
        // vector<long long int> dp(n+1,-1);
        long long int mod=1000000007;
        long long int prev2=0;
        long long int prev=1;
        for(int i=2;i<=n;i++){
            long long int temp=prev+prev2;
            prev2=prev%mod;
            prev=temp%mod;
        }
        return prev;
    }
};

//*Climbing Stairs
//M1:Memoisation
class Solution {
public:
int recStairs(int n,vector<int> &dp){
    if(dp[n]!=-1){
        return dp[n];
    }
    if(n==0 || n==1){
        dp[n]=1;
        return 1;
    }
    int case1=recStairs(n-1,dp);
    int case2=recStairs(n-2,dp);
    dp[n]=case1+case2;
    return dp[n];
}
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return recStairs(n,dp);
    }
};
//M2:Tabulation:
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        dp[0]=dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
//M3:Removing Auxilary space from Tabulation:
  int climbStairs(int n) {
        // vector<int> dp(n+1,-1);
        // dp[0]=dp[1]=1;
        int prev=1;
        int prev2=1;
        for(int i=2;i<=n;i++){
            int count=prev+prev2;
            prev2=prev;
            prev=count;
        }
        return prev;
    }
