//*Minimum Add to Make Parentheses Valid, ex: ()))(( output:4
//M1: Direct:
class Solution {
public:
    int minAddToMakeValid(string s) {
        int right_req=0;
        int left_req=0;
        for(char ch : s){
            if(ch=='('){
               right_req++;
            }
            else{
                if(right_req>0){
                    right_req--;
                }
                else{
                    left_req++;
                }
            }
        }
        return left_req+right_req;
    }
};

//**Count and Say , Below RLE FUNCTION: string "3322251" we replace "33" with "23", replace "222" with "32",
                                        replace "5" with "15" and replace "1" with "11". Thus the compressed string becomes "23321511".
//countAndSay(1) = "1"
//countAndSay(2) = RLE of "1" = "11"
//countAndSay(3) = RLE of "11" = "21"
//countAndSay(4) = RLE of "21" = "1211"

//M1: Direct:
class Solution {
public:
    string RLE(string s){
        int n=s.size();
        int i=0;
        string ans="";
        while(i<n){
            int count=1;
            char ch=s[i];
            while(s[i]==s[i+1] && i+1<n){
                count++;
                i++;
            }
            i++;
            ans+=(count+'0');
            ans+=ch;
        }
        return ans;
    }
    string countAndSay(int n) {
        string s="1";
        if(n==1){
            return s;
        }
        for(int i=1;i<n;i++){
            s=RLE(s);
        }
        return s;
    }
};

//***First Occurrence in a String
//M1: BRUTE FORCE OR NAIVE STRING MATCHING 
class Solution {
public:
    int strStr(string text, string pat) {
        int n=text.size();
        int m=pat.size();
        int j=0;
        for(int i=0;i<=n-m;i++){
            for(j=0;j<m;j++){
                if(text[i+j]!=pat[j]){
                    break;
                }
            }
            if(j==m){
                return i;
            }
        }
        return -1;
    }
};

//****Count Palindromic Subsequences
//M1:Recursion Normal, TLE
class Solution{
    public:
    /*You are required to complete below method */
    bool is_palindrome(string str){
        if(str== "") return false;
        int n=str.size();
        for(int i=0;i<n/2;i++){
            if(str[i]!=str[n-1-i]){
                return false;
            }
        }
        return true;
    }
    long long int paliCount(int i, int n, string str,string cur,long long int mod){
        if(i==n){
            if(is_palindrome(cur)){
                return 1;
            }
            return 0;
        }
        long long int left=paliCount(i+1,n,str,cur+str[i],mod)%mod;
        long long int right=paliCount(i+1,n,str,cur,mod)%mod;
        return (left+right)%mod;
    }
    long long int  countPS(string str)
    {
       //Your code here
       long long int mod=1000000007;
       return paliCount(0,str.size(),str,"",mod);
       
    }
     
};
