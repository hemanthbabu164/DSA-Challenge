//Generate Binary Strings without consecutive zeroes
//Recursion:
//Time complexity: O(2^n)
//Space complexity: O(n)
class Solution {
public:
    void genString(int i,int n,bool key,string s,vector<string> &ans){
        if(i==n){
            ans.push_back(s);
            return;
        }
        i++;
        if(key){
            string temp=s;
            temp+='0';
            genString(i,n,false,temp,ans);
            s+='1';
            genString(i,n,true,s,ans);
        }
        else{
            s+='1';
            genString(i,n,true,s,ans);
        }
    }
    vector<string> validStrings(int n) {
        vector<string> ans;
        string s;
        genString(0,n,true,s,ans);
        return ans;
    }
};


//Generate Parantheses 
//Recursion , Same as Above
class Solution {
public:
    void genParantheses(int openCount,int closedCount,int n,vector<string> &ans,string s){
        if(closedCount==0){
            ans.push_back(s);
            return;
        }
        if(openCount==closedCount){
            openCount--;
            s+='(';
            genParantheses(openCount,closedCount,n,ans,s);
        }
        else{
            if(openCount>0){
                //taking open
                openCount--;
                string temp=s;
                temp+='(';
                genParantheses(openCount,closedCount,n,ans,temp);
                openCount++;
                //taking closed
                closedCount--;
                s+=')';
                genParantheses(openCount,closedCount,n,ans,s);
            }
            else{
                closedCount--;
                s+=')';
                genParantheses(openCount,closedCount,n,ans,s);
            }
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s;
        genParantheses(n,n,n,ans,s);
        return ans;
    }
};
