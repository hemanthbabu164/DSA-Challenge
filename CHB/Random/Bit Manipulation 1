//Get ith bit,set ith bit, clear ith bit
class Solution {
  public:
    void bitManipulation(int num, int i) {
        // your code here
        vector<int> ans;
        int ibit= ((num)&(1<<(i-1)))>>(i-1);
        int seti=0;
        int cleari=0;
        if(ibit){
            seti=num;
            cleari=(num-(1<<(i-1)));
        }
        else{
            seti=num+(1<<(i-1));
            cleari=num;
        }
        cout<<ibit<<" "<<seti<<" "<<cleari;
        
    }
};

//K-th Bit is Set or Not
class Solution {
  public:
    // Function to check if Kth bit is set or not.
    bool checkKthBit(int n, int k) {
        // Your code here
        // It can be a one liner logic!! Think of it!!
        return n&(1<<(k));
    }
};

//Odd or Even
class Solution {
  public:
    string oddEven(int n) {
        // code here
        if(n&1){
            return "odd";
        }
        return "even";
    }
};

//Power of Two
//M1: Meri Magleno
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if (n <= 0) return false; 
        int count=0;
        long long pow2=1;
        int shift=0;
        while(n>=pow2 && count<=1){
            if(n & (1<<shift)){
                count++;
            }
            shift++;
            pow2*=2;
        }
        return (count==1);
    }
};

//M2: The best simple method
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0){
            return false;
        }
        if((n & n-1) == 0){
            return true;
        }
        return false;
    }
};
