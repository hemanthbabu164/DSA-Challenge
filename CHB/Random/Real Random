//*Maximum mat(c,d)-mat(a,b) where c>a,d>b in matrix NxN
//M1: BruteForce

its just O(N4) where we traverse the whole matrix and find the maximum of the matrix madeof next rows and columns

//M2: Saving the Maximums in a matrix before computing
#include <bits/stdc++.h>
using namespace std;

int maxDiff(vector<vector<int>> &mat){
    int n=mat.size();
    int maxi=0;
    int maxArr[n][n];
    maxArr[n-1][n-1]=mat[n-1][n-1];
    //preprocessing Last Row
    for(int i=n-2;i>=0;i--){
        maxArr[n-1][i]=max(mat[n-1][i],maxArr[n-1][i+1]);
    }
    //preprocessing Last Columns
    for(int i=n-2;i>=0;i--){
        maxArr[i][n-1]=max(mat[i][n-1],maxArr[i+1][n-1]);
    }

    for(int i=n-2;i>=0;i--){
        for(int j=n-2;j>=0;j--){
            maxi=max(maxi,maxArr[i+1][j+1] - mat[i][j]);
            maxArr[i][j]=max(mat[i][j],max(maxArr[i+1][j],maxArr[i][j+1]));
        }
    }
    return maxi;
}

int main() {
    vector<vector<int>> mat;
    mat.push_back({1,6,2,4});
    mat.push_back({1,3,5,7});
    mat.push_back({8,9,2,2});
    mat.push_back({7,1,7,6});
    
    cout<<"Maximuns mat(c,d)-mat(a,b) where c>a,d>b: "<<maxDiff(mat);

    return 0;
}

//**Container With Most Water
//TWO POINTER APPROACH
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxvol=0;
        int n=height.size();
        int l=0;
        int r=n-1;
        while(l<r){
            maxvol= max(maxvol,(r-l)*min(height[l],height[r]));
            if(height[l]<=height[r]){
                l++;
            }
            else{
                r--;
            }
        }
        return maxvol;
    }
};


//**Trapping Rain Water
//M1:BruteForce: TC:O(N2), SC:O(1)
class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0;
        int n=height.size();
        //for first and last the left or right one is going to be zero.
        for(int i=1;i<n-1;i++){
            int left_max=height[i];
            int right_max=height[i];
            for(int j=0;j<i;j++){
                left_max=max(left_max,height[j]);
            }
            for(int j=i+1;j<n;j++){
                right_max=max(right_max,height[j]);
            }
            sum+=min(left_max,right_max) - height[i];
        }
        return sum;
    }
};
//M2: PRECALCULATING LEFT MAXIMUMS , RIGHT MAXIMUMS AND STORING THEM INTO AN ARRAY.
//TC:O(N), SC:O(N)
class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0;
        int n=height.size();
        vector<int> max_left(n,0);
        max_left[0]=height[0];
        vector<int> max_right(n,0);
        max_right[n-1]=height[n-1];
        for(int i=1;i<n;i++){
            max_left[i]=max(max_left[i-1],height[i]);
        }
        for(int i=n-2;i>=0;i--){
            max_right[i]=max(max_right[i+1],height[i]);
        }
        //for first and last the left or right one is going to be zero.
        for(int i=1;i<n-1;i++){
            int poshigh=min(max_left[i-1],max_right[i+1]);
            if(poshigh>height[i]){
                sum+=poshigh-height[i];
            }
        }
        return sum;
    }
};

//M3: TWO POINTER APPROACH
TC:O(N), SC:O(1)
//SINCE WE NEED THE MIN OF LEFTMAX,RIGHTMAX , WE MOVE THE POINTER WHERE WE HAVE LOWER MAX AND TAKE THE SUM WITH IT
class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0;
        int n=height.size();
        int l=0;
        int r=n-1;
        int lmax=height[l];
        int rmax=height[r];
        while(l<r){
            if(lmax<=rmax){
                l++;
                sum+=max(0,lmax-height[l]);
                lmax=max(lmax,height[l]);
            }
            else{
                r--;
                sum+=max(0,rmax-height[r]);
                rmax=max(rmax,height[r]);
            }
        }
        return sum;
    }
};
