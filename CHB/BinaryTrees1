//1.PreOrder Traversal
void preorder(TreeNode<int> * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        ans.push_back(root->data);
        preorder(root->left, ans);
        preorder(root->right, ans);
    }
}


vector<int> preOrder(TreeNode<int> * root){
    vector<int> ans;
    preorder(root,ans);
    return ans;
}

//2.InOrder Traversal
void inOrder(TreeNode * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        inOrder(root->left, ans);
        ans.push_back(root->data);
        inOrder(root->right, ans);
    }
}


vector<int> getInOrderTraversal(TreeNode *root)
{
    vector<int> ans;
    inOrder(root,ans);
    return ans;
}


//3.PostOrder Traversal
void postOrder(TreeNode * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        postOrder(root->left, ans);
        postOrder(root->right, ans);
        ans.push_back(root->data);
    }
}


vector<int> postorderTraversal(TreeNode *root)
{
    vector<int> ans;
    postOrder(root,ans);
    return ans;
}

//4.In , pre, post in one

void preorder(TreeNode * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        ans.push_back(root->data);
        preorder(root->left, ans);
        preorder(root->right, ans);
    }
}
void inOrder(TreeNode * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        inOrder(root->left, ans);
        ans.push_back(root->data);
        inOrder(root->right, ans);
    }
}
void postOrder(TreeNode * root,vector<int> &ans ){
    if(root==NULL || root->data==-1){
        return;
    }
    else{
        postOrder(root->left, ans);
        postOrder(root->right, ans);
        ans.push_back(root->data);
    }
}

vector<vector<int>> getTreeTraversal(TreeNode *root){
    vector<vector<int>> tot;
    vector<int> ans1,ans2,ans3;
    inOrder(root,ans1);
    preorder(root, ans2);
    postOrder(root, ans3);
    tot.push_back(ans1);
    tot.push_back(ans2);
    tot.push_back(ans3);
    return tot;
}

//5.Level order Traversal Or BFT
#include <queue>
vector<int> levelOrder(TreeNode<int> * root){
    vector<int> ans;
    if(root==NULL){
        return ans;
    }
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()){
        int l=q.size();
        for(int i=0;i<q.size();i++){
            TreeNode<int> *node=q.front();
            q.pop();
            if(node->left!=NULL){
                q.push(node->left);
            }
            if(node->right!=NULL){
                q.push(node->right);
            }
            ans.push_back(node->data);
            
        }
    }
    return ans;
}


//5.1 Segregation of data according to levels
vector<vector<int>> levelOrder(TreeNode * root){
        vector<int> ans;
        vector<vector<int>> res;
        if(root==NULL){
            return res;
        }
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int l=q.size();
            for(int i=0;i<l;i++){
                TreeNode *node=q.front();
                q.pop();
                if(node->left!=NULL){
                    q.push(node->left);
                }
                if(node->right!=NULL){
                    q.push(node->right);
                }
                ans.push_back(node->val);
                
            }   
            res.push_back(ans);
            ans.clear();
        }
        return res;
    }
