// adding the numbers where number's digits are in linkedlist nodes with out using extra space
//{ Driver Code Starts
// driver

#include <bits/stdc++.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}


// } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    Node* result=NULL;//=new Node(0);
    public:
    //Function to add two numbers represented by linked list.
  
    void add(struct Node* first, struct Node* second,struct Node* &res,int& num)
    {
        
        if(first!=NULL&&second!=NULL)
        {
            Node *a,*b;
            a=first;b=second;
            first=first->next;
            second=second->next;
            add(first,second,res,num);
            Node* newnode=new Node(num+a->data+b->data);
            num=(num+a->data+b->data)/10;
            newnode->data=newnode->data%10;
            newnode->next=res;
            res=newnode;
             
        }
        
    }
    
    void addremaining(struct Node* start,struct Node* stop,struct Node* &res,int& num)
    {
    	if(start!=stop){
    		Node* t=start;
    		start=start->next;
    		addremaining(start,stop,res,num);
    		Node* newnode=new Node(t->data+num);
    		num=(num+t->data)/10;
    		newnode->data=newnode->data%10;
            newnode->next=res;
            res=newnode;	
		}
	}
    
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        Node* first1=first;Node* second1=second;
        int n1=0,n2=0;
        Node *a,*b;a=first1;	b=second1;
        while(first1!=NULL)
        {
        	n1++;
        	
        	first1=first1->next;
		}
            
        while(second1!=NULL)
        {
        	n2++;
        
        	second1=second1->next;
		}
        
        int diff=0;
        diff=abs(n1-n2);
         
         
        if(n1>n2)
        {
        	 
            while(diff!=0)
            {
            	 
            	 
                a=a->next;
                diff--;
            }
        }
        else{
        	 
            while(diff!=0)
            {
            	 
            	 
                b=b->next;
                diff--;
            }
        }
       
        int num=0;
        add(a,b,result,num);
        
        if(n1>n2)
        {
        	 addremaining(first,a,result,num);
		}
		else{
			addremaining(second,b,result,num);
		}
		
		
		if(n1==n2)
		{
		    if(num)
		    {
		        
		        Node* newnode=new Node(num);
    		 
        		//newnode->data=newnode->data%10;
                newnode->next=result;
                result=newnode;
		    }
		}
		else if(result->data==0)
		{
			Node* newnode=new Node(1);
			newnode->next=result;
			result=newnode;
			
		}
		
		 
        return result;
    }
};


//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        Solution ob;
        Node* res = ob.addTwoLists(first,second);
        printList(res);
    }
    return 0;
}

// } Driver Code Ends


// Rotating linked liist at particular node
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


// } Driver Code Ends
/*

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/


class Solution
{
    public:
    //Function to rotate a linked list.
    Node* rotate(Node* head, int k)
    {
        // Your code here
        Node* tem=head;Node* stopped;
        while(k>0){
            k--;
            stopped=tem;
            tem=tem->next;
        }
        if(tem==NULL)
            return head;
        
        Node* Last=NULL;
        Node* cur=head;
        while(cur!=NULL)
        {
            Last=cur;
            cur=cur->next;
        }
        stopped->next=NULL;
        Last->next=head;
        //head=tem;
        
        return tem;
    
    }
};
    


//{ Driver Code Starts.

void printList(Node *n)
{
    while (n != NULL)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, val, k;
        cin>>n;
        
        cin>> val;
        Node *head = new Node(val);
        Node *tail = head;
        
        for(int i=0; i<n-1; i++)
        {
            cin>> val;
            tail->next = new Node(val);
            tail = tail->next;
        }
        
        cin>> k;
        
        Solution ob;
        head = ob.rotate(head,k);
        printList(head);
    }
    return 1;
}

// } Driver Code Ends





