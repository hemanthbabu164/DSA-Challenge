//Given an array arr[] denoting heights of N towers and a positive integer K.
//For each tower, you must perform exactly one of the following operations exactly once.
//Increase the height of the tower by K
//Decrease the height of the tower by K
//Find out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function template for C++

class Solution {
  public:
   int getMinDiff(int arr[], int n, int k) {
        // code here
    sort(arr,arr+n);
    int mini=arr[0];
    int maxi=arr[n-1];
    int ans=maxi-mini;
    for(int i=1;i<n;i++){
        if(arr[i]-k<0)
            continue;
       mini=min(arr[0]+k,arr[i]-k);
        maxi=max(arr[i-1]+k,arr[n-1]-k);
        ans=min(ans,maxi-mini);
    }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> k;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getMinDiff(arr, n, k);
        cout << ans << "\n";
    }
    return 0;
}
// } Driver Code Ends


//Equilibrium point point at which leftelements sum = right elements sum .O(n)
//{ Driver Code Starts
#include <iostream>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    // Function to find equilibrium point in the array.
    // a: input array
    // n: size of array
    int equilibriumPoint(long long a[], int n) {
    
        // Your code here
        if(n==1)
            return a[0];
        int left=0,right=n-1;long long leftsum=a[0],rightsum=a[n-1];
        while(right>=left+1)
        {
            if(leftsum<=rightsum)
            {
                
                left++;
                leftsum+=a[left];
            }
            else {
                right--;
                rightsum+=a[right];
            } 
            if(right-left==2&&leftsum==rightsum)
                return right;
        }
        return -1;
    }

};

//{ Driver Code Starts.


int main() {

    long long t;
    
    //taking testcases
    cin >> t;

    while (t--) {
        long long n;
        
        //taking input n
        cin >> n;
        long long a[n];

        //adding elements to the array
        for (long long i = 0; i < n; i++) {
            cin >> a[i];
        }
        
        Solution ob;

        //calling equilibriumPoint() function
        cout << ob.equilibriumPoint(a, n) << endl;
    }
    return 0;
}

// } Driver Code Ends
