//https://leetcode.com/problems/container-with-most-water/description/

class Solution {
public:
    int maxArea(vector<int>& height) {
        int Area=0;
        int left=0,right=height.size()-1;
        while(left<right){
            Area=max(Area,min(height[left],height[right])*(right-left));
            if(height[left]<height[right])
                left++;
            else
                right--;    

        }

        return Area;
    }
};

//https://leetcode.com/problems/roman-to-integer/

class Solution {
public:
    int romanToInt(string s) {
        int value=0;int i=0,n=s.length();
        while(i<n)
        {
            if(s[i]=='I')
            {
                if(s[i+1]=='V')
                {
                    value+=4;
                    i++;       
                }
                else if(s[i+1]=='X')
                {
                    value+=9;
                    i++;
                }
                else{
                    value++;
                } 
            }
            else if(s[i]=='V')
                value+=5;
            else if(s[i]=='X')
            {
                if(s[i+1]=='L')
                {
                    value+=40;i++;
                }
                else if(s[i+1]=='C')
                {
                    value+=90;i++;
                }
                else
                    value+=10;  
            }
            else if(s[i]=='L')
            {
                value+=50;
            }    
            else if(s[i]=='C')
            {
                if(s[i+1]=='D')
                {
                    value+=400;i++;
                }
                else if(s[i+1]=='M')
                {
                    value+=900;i++;
                }
                else
                    value+=100;  
            }
            else if(s[i]=='D')
            {
                value+=500;
            }else if(s[i]=='M')
            {
                value+=1000;
            }
            i++;
        }
        return value;
    }
};
