
// Question::::::Maximum element in every subarray with given subarray length in an array.

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    vector<int> max_of_subarrays(vector<int> arr, int n, int k) {

        int left=0,right=k-1;vector<int> result;
        if(k==1)
        {
            for(int i=0;i<arr.size();i++)
            {
                result.push_back(arr[i]);
            }
            return result;
        }
        int maxi=-1;int prev;
            for(int i=left;i<=right;i++)
            {
                if(maxi<=arr[i])
                {
                    maxi=arr[i];
                }
            }
            prev=maxi;
        result.push_back(maxi);
        left++;
        right++;
        
        while(right<=arr.size()-1)
        {
            if(prev!=arr[left-1])
            {
                if(maxi<arr[right])
                {
                    maxi=arr[right];
                    prev=maxi;
                }
            }
            else{
                maxi=arr[left];
                for(int i=left+1;i<=right;i++)
                {
                    maxi=max(maxi,arr[i]);
                    prev=maxi;
                }
            }
            result.push_back(maxi);
            left++;
            right++;
        }
        return result;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;

    while (t--) {

        int n, k;
        cin >> n >> k;

        vector<int> arr(n);
        for (int i = 0; i < n; i++) cin >> arr[i];
        Solution ob;
        vector<int> res = ob.max_of_subarrays(arr, n, k);
        for (int i = 0; i < res.size(); i++) cout << res[i] << " ";
        cout << endl;
    }

    return 0;
}
// } Driver Code Ends





//Question:: Find minimum no.of platforms so that no train will be wait for empty platform  given arrival and depature time all are in one day

//{ Driver Code Starts
// Program to find minimum number of platforms
// required on a railway station
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    struct platformnode{
        int number;
        int curtime;
    };
    
    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	platformnode platform[n+1];
    	vector<pair<int,int>> data;
    	
    	for(int i=0;i<n;i++)
    	{
    	    data.push_back(make_pair(arr[i],dep[i]));
    	}
    	
    	sort(data.begin(),data.end());
    	
    	for(int i=0;i<n;i++)
    	    platform[i].curtime=-1;
    	    
    	int pn=0;    
    	for(int i=0;i<n;i++)
    	{
    	    pn=0;
    	    bool alloted=false;
    	    while(!alloted){
        	    if(data[i].first>platform[pn].curtime)
        	    {
        	        platform[pn].curtime=data[i].second;
        	        alloted=true;
        	    }
        	    else{
        	        pn++;
        	    } 
    	    }
    	}
    	for(int i=0;i<n;i++)
    	{
    	    if(platform[i].curtime==-1)
    	        return  i;
    	}
        return n;
    	
    }
};


//{ Driver Code Starts.
// Driver code
int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        int dep[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        for(int j=0;j<n;j++){
            cin>>dep[j];
        }
        Solution ob;
        cout <<ob.findPlatform(arr, dep, n)<<endl;
    } 
   return 0;
}
// } Driver Code Ends
